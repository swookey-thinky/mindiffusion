# Flux based rectified flow model.
diffusion:
  parameterization: "rectified_flow"
  # Sampling section determines the size of the sampled output
  # from the model, and defines the sampling method used
  sampling:
    output_channels: 1
    output_spatial_size: 32
    target: image_diffusion.samplers.rectified_flow.AncestralSampler
    params: {}
  # The noise scheduler to use with the forward diffusion process.
  noise_scheduler:
    target: image_diffusion.scheduler.DiscreteRectifiedFlowNoiseScheduler
    params:
      # The number of noise scales
      steps: 1000
      # The maximum time
      max_time: 1.0
  sde:
    target: image_diffusion.sde.rectified_flow.RectifiedFlow
    params:
      N: 1000
      T: 1.0
  # A preprocessor to use with the context before sending to the score network.
  context_preprocessing:
      # The Prompts Preprocessor converts the list of text prompts in the context
      # into a batch of text tokens of shape (B, text_context_size)
      - target: image_diffusion.layers.embedding.CLIPTextEmbedder
        params:
          # The max length of the text token sequence
          max_length: 77
          # The name of the T5 text model to use
          version: "openai/clip-vit-large-patch14"
          context_key: "clip_text_embeddings"
      - target: image_diffusion.layers.embedding.T5TextEmbedder
        params:
          # The max length of the text token sequence
          max_length: 128
          # The name of the T5 text model to use
          version: "google/t5-v1_1-base"
          context_key: "t5_text_embeddings"
  # A preprocessor for input to the model.
  input_preprocessing:
    target: image_diffusion.conditioning.IgnoreInputPreprocessor
    params: {}
  # Setting for classifier free guidance.
  classifier_free_guidance:
    # Classifier-free guidance scale, where the value is >= 1.0
    classifier_free_guidance: 1.0
    # Unconditional guidance probability
    unconditional_guidance_probability: 0.2
    # The context signals to apply guidance to.
    signals: ["text_prompts"]
    # For classifier free guidance, we need the ability to create an unconditional
    # context given the conditional context. This unconditional context needs
    # to be applied in both training and sampling, and will return a new
    # context dictionary given the original context dictionary.
    unconditional_context:
      target: image_diffusion.conditioning.UnconditionalTextPromptsAdapter
      params: {}
  # Defines the score network for predicting the noise parameter
  score_network:
    target: image_diffusion.score_networks.flux.Flux
    params:
      input_spatial_size: 32
      # Model input channels
      input_channels: 1
      # The image patch input dimensions (C*PH*PW)
      in_channels: 64
      # Vec is the CLIP text embedding dimension
      vec_in_dim: 768
      # The T5 text embedding dimension
      context_in_dim: 768
      # The hidden size of the transformer blocks
      hidden_size: 384
      # MLP ratio (expands the hidden size) in transformer blocks
      mlp_ratio: 4.0
      # Number of attention heads
      num_heads: 6
      # Transformer depth, of the double blocks
      depth: 6
      # Transformer depth, of the single blocks
      depth_single_blocks: 12
      # Dimensions of ROPE axes. Must sum to in_channels.
      axes_dim: [16, 24, 24]
      theta: 10000
      qkv_bias: True
      guidance_embed: False
      patch_size: 8
      is_learned_sigma: False
      is_class_conditional: False
      # Additional conditioning signals for the model. The projections
      # defined here will be applied before running through the rest of the
      # score network.
      conditioning:
        # The signals (keys in the dictionary) that are available in the conditioning
        # context.
        signals: []
        projections: {}
        # The context transformer to use at the top of the score network. This transforms
        # the context with a shared set of parameters.
        context_transformer_head:
          # Timestep -> timestep embedding
          - target: torch.nn.Identity
            params: {}
# Describes the dataset used in training.
data:
  # Spatial width/height of the data input to the model.
  image_size: 32
  # Number of channels in the input data
  num_channels: 1
  # The number of classes in the dataset
  num_classes: 10

